g <- buildSNNGraph(sce, use.dimred="PCA")
table(igraph::cluster_louvain(g, resolution = 1)$membership, sce$condition)
table(quickCluster(sce, method = "hclust"), sce$condition)
table(quickCluster(sce, method = "igraph"), sce$condition)
?quickCluster
sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
table(quickCluster(sce, method = "igraph"), sce$condition)
table(quickCluster(sce, method = "hclust"), sce$condition)
sce <- readRDS("../../data/01-fil/fil-t50-s50-b1.rds")
table(quickCluster(sce, method = "igraph"), sce$condition)
table(quickCluster(sce, method = "hclust"), sce$condition)
plotPCA(sce, colour_by = "cluster_id")
plotPCA(sce, colour_by = "cluster_id", shape_by = "condition")
sce <- readRDS("../../data/01-fil/fil-t50-s25-b1.rds")
table(quickCluster(sce, method = "hclust"), sce$condition)
sce <- readRDS("../../data/01-fil/fil-t75-s50-b1.rds")
table(quickCluster(sce, method = "hclust"), sce$condition)
sce <- readRDS("../../data/01-fil/fil-t100-s50-b1.rds")
table(quickCluster(sce, method = "hclust"), sce$condition)
sce <- readRDS("../../data/01-fil/fil-t100-s25-b1.rds")
table(quickCluster(sce, method = "hclust"), sce$condition)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
suppressPackageStartupMessages({
library("splatter")
library("scater")
library("ggplot2")
})
set.seed(42)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0,
batch.facScale = 0,
similarity.scale = 0,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 0,
cde.facScale = 0,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0,
batch.facScale = 0,
similarity.scale = 0,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
x
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0.05,
batch.facScale = 0,
similarity.scale = 0.05,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
sce <- readRDS("../../data/01-fil/fil-t100-s0-b1.rds")
table(quickCluster(sce, method = "hclust"), sce$Condition)
table(quickCluster(sce, method = "hclust"), sce$condition)
table(quickCluster(sce, method = "igraph"), sce$condition)
?quickCluster
table(x$Group, x$Condition)
table(quickCluster(x, method = "hclust"), x$Condition)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0.1,
batch.facScale = 0.1,
similarity.scale = 0,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0.1,
batch.facScale = 0.1,
similarity.scale = 0,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = TRUE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
x
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 10,
batch.facScale = 0,
similarity.scale = 0,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = TRUE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 10,
batch.facScale = 0,
similarity.scale = 0,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0,
batch.facScale = 0,
similarity.scale = 10,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
BiocManager::install('miloR')
devtools::install_github("MarioniLab/miloDE")
library(miloDE)
x
milo <- assign_neighbourhoods(x, k = 20, order = 2,
filtering = TRUE, reducedDim_name = "pca.corrected")
milo <- assign_neighbourhoods(x, k = 20, order = 2,
filtering = TRUE, reducedDim_name = "PCA")
x
?assign_neighbourhoods
colnames(x)
colnames(x) <- seq_len(ncol(x))
milo <- assign_neighbourhoods(x, k = 20,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
ei(x)
.ei(x)
metadata(x)
# construct design matrix
sce <- x
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
group
x <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
x <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
#x <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
colnames(x) <- seq_len(ncol(x))
milo <- assign_neighbourhoods(x, k = 20,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
sce <- x
sce <- assign_neighbourhoods(sce, k = 20,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
sce$sample_id <- droplevels(sce$sample_id)
# split cell indices by sample
idx <- split(seq(ncol(sce)), sce$sample_id)
# compute median expression by marker-sample
med <- sapply(idx, \(.) rowMedians(assay(sce[, .], "counts")))
rownames(med) <- rownames(sce)
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
group
de_stat = de_test_neighbourhoods(milo, sample_id = "sample_id", design = model.matrix(~ group))
model.matrix(~ group)
de_stat = de_test_neighbourhoods(milo, sample_id = "sample_id", design = ~ group)
de_stat = de_test_neighbourhoods(milo,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
de_stat
sce <- assign_neighbourhoods(sce, k = 20,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
sce
nhood(sce)
colData(milo)
library(miloR)
nhoods(sce)
sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
sce <- assign_neighbourhoods(sce, k = 20,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
de_stat = de_test_neighbourhoods(sce,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
de_stat
library(miloDE)
#sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
colnames(sce) <- seq_len(ncol(sce))
sce <- assign_neighbourhoods(sce, k = 50,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
sce$sample_id <- droplevels(sce$sample_id)
# split cell indices by sample
idx <- split(seq(ncol(sce)), sce$sample_id)
# compute median expression by marker-sample
med <- sapply(idx, \(.) rowMedians(assay(sce[, .], "counts")))
rownames(med) <- rownames(sce)
# construct design matrix
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
de_stat = de_test_neighbourhoods(sce,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
library(miloDE)
#sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
colnames(sce) <- seq_len(ncol(sce))
sce <- assign_neighbourhoods(sce, k = 100,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
# construct design matrix
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
de_stat = de_test_neighbourhoods(sce,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
library(miloDE)
#sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
colnames(sce) <- seq_len(ncol(sce))
sce <- assign_neighbourhoods(sce, k = 200,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
# construct design matrix
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
de_stat = de_test_neighbourhoods(sce,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
de_stat
library(miloDE)
#sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
colnames(sce) <- seq_len(ncol(sce))
sce <- assign_neighbourhoods(sce, k = 500,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
# construct design matrix
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
de_stat = de_test_neighbourhoods(sce,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
de_stat
library(miloDE)
#sce <- readRDS("../../data/01-fil/fil-t0-s100-b1.rds")
colnames(sce) <- seq_len(ncol(sce))
sce <- assign_neighbourhoods(sce, k = 1000,
order = 2,
filtering = TRUE,
reducedDim_name = "PCA")
# construct design matrix
sids <- unique(sce$sample_id)
idx <- match(sids, sce$sample_id)
ei <- data.frame(
row.names = NULL,
sample_id = sids,
condition = sce$condition[idx])
group <- factor(ei$condition)
de_stat = de_test_neighbourhoods(sce,
sample_id = "sample_id",
design = ~ group,
covariates = c("condition"))
de_stat
table(quickCluster(x, method = "hclust"), x$Condition)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0,
batch.facScale = 0,
similarity.scale = 10,
de.prob = 0.8,
de.facLoc = 0,
de.facScale = 0,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 1,
cde.facScale = 1,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0,
batch.facScale = 0,
similarity.scale = 10,
de.prob = 0.8,
de.facLoc = 0.25,
de.facScale = 0.25,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 0.25,
cde.facScale = 0.25,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
x <- logNormCounts(x)
x <- runPCA(x)
plotPCA(x, colour_by = "Group", shape_by = "Condition")
table(quickCluster(x, method = "hclust"), x$Condition)
table(x$Group, x$Condition)
install_github("Sun-lab/ideas")
library("devtools");
install_github("Sun-lab/ideas")
set.seed(seed <- 1)
vcf <- mockVCF(n.samples = 6)
gff <- mockGFF(n.genes = 2000)
params.group <- newSplatPopParams(batchCells = c(300, 300),
batch.facLoc = 0,
batch.facScale = 0,
similarity.scale = 10,
de.prob = 0.8,
de.facLoc = 0.25,
de.facScale = 0.25,
group.prob = c(1/3, 1/3, 1/3),
condition.prob = c(0.5, 0.5),
cde.prob= 0.8,
cde.facLoc = 0.25,
cde.facScale = 0.25,
bcv.common = 1
)
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
library(ideas)
sim_data <- readRDS("~/Desktop/type-state/data/01-fil/fil-t100-s100-b1.rds")
x <- splatPopSimulate(vcf = vcf, gff = gff,
params = params.group,
sparsify = FALSE)
plotPCA(sim_data, colour_by = "cluster_id", shape_by = "condition")
plotPCA(sim_data, colour_by = "cluster_id", shape_by = "sample")
plotPCA(sim_data, colour_by = "cluster_id", shape_by = "sample_id")
simu_data_rds = "sim_data_ncase_10_nctrl_10_ncell_120_fold_mean_1.2_var_1.5.rds"
sim_data      = readRDS(paste0("data/", simu_data_rds))
