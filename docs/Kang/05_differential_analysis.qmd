---
title: "Case study on Kang18 scRNA-seq dataset - differential abundance/state analysis"
format:
  html:
    toc: true
    code-fold: true
    code-tools: true
    toc_float: true
---

## Set up

### Dependencies
```{r dependencies}
suppressPackageStartupMessages({
    library(edgeR)
    library(SingleCellExperiment)
    library(miloDE)
    #library(lemur)
    library(scuttle)
    library(miloR)
    library(dplyr)
    library(patchwork)
    library(poolr)
    library(reshape2)
    library(GGally)
})
```

### Reading data
```{r data}
sces <- readRDS("../../data/Kang/reprocessed_sce.rds")
```

## Differential state analysis

### edgeR

```{r dsedgeR}
DS_edgeR <- \(x) {
    # pseudo-bulking by sample & cluster
    ids <- colData(x)[c("sample_id", "cluster_re")]
    y <- aggregateAcrossCells(x, ids)
    idx <- split(seq(ncol(y)), y$cluster_re)
    lapply(names(idx), \(k) {
        z <- y[, idx[[k]]]
        gs <- unique(z$group_id)
        if (length(gs) == 2 & length(idx[[k]]) > 2) {
            # differential testing
            mm <- model.matrix(~ z$group_id)
            z <- DGEList(assay(z))
            z <- calcNormFactors(z)
            z <- estimateDisp(z, mm)
            fit <- glmQLFit(z, mm)
            lrt <- glmQLFTest(fit)
            tbl <- topTags(lrt, n=Inf, sort.by="none")$table
            # output standardization
            old <- c("logFC", "PValue", "FDR")
            new <- c("lfc", "p_val", "p_adj")
            names(tbl)[match(old, names(tbl))] <- new
            cell_id <- I(rep(list(idx[[k]]), nrow(tbl)))
            data.frame(
                row.names=NULL,
                gene_id=rownames(tbl),
                cell_id, cluster_re=k, tbl)
        }
    }) |> do.call(what=rbind)
}

#DSedgeR <- lapply(sces, DS_edgeR)
#saveRDS(DSedgeR, "../../data/Kang/DSedgeR.rds")
#DSedgeR <- readRDS("../../data/Kang/DSedgeR.rds")

dfer <- lapply(names(DSedgeR), \(x) {
  df <- DSedgeR[[x]]
  data.frame(df[c("gene_id", "p_val", "p_adj")],
    sel = x, das = "DS_edgeR")
})

dfer <- lapply(dfer, \(x) {
    out <- vapply(unique(x$gene_id), \(g) {
        p <- x[x$gene_id == g, "p_adj"]
        fisher(p)$statistic/attr(fisher(p)$statistic,"df")
        #-log(fisher(p)$p)
    }, numeric(1))
    data.frame(row.names = NULL, gene_id = names(out), fisher = out,
        sel = x$sel[seq_len(length(out))], das = x$das[seq_len(length(out))])
})

dfer <- do.call(rbind, dfer)
```



### Lemur 
```{r lemur}
.lemur <- \(x) {
    ids <- levels(x$group_id)
    fit <- lemur(x, design=~group_id)
    fit <- test_de(fit, contrast=cond(group_id=ids[1])-cond(group_id=ids[2]))
    res <- find_de_neighborhoods(fit,
        group_by=vars(sample_id, group_id),
        verbose=FALSE
      )
    # old <- c("name",  "pval", "adj_pval")
    # new <- c("gene_id", "p_val", "p_adj")
    # names(res)[match(old, names(res))] <- new
    return(res)
}
#lemur <- lapply(sces, .lemur)
#saveRDS(lemur, "../../data/Kang/lemur.rds")
#lem <- readRDS("../../data/Kang/lemur.rds")
lemur <- lapply(lem, \(res) {
    old <- c("name",  "pval", "adj_pval")
    new <- c("gene_id", "p_val", "p_adj")
    names(res)[match(old, names(res))] <- new
    res
})
dflr <- lapply(names(lemur), \(x) {
  df <- lemur[[x]]
  data.frame(df[c("gene_id", "p_val", "p_adj")],
    sel = x, das = "DS_lemur")
})

dflr <- lapply(dflr, \(x) {
    out <- vapply(unique(x$gene_id), \(g) {
        p <- x[x$gene_id == g, "p_adj"]
        fisher(p)$statistic/attr(fisher(p)$statistic,"df")
        #-log(fisher(p)$p)
    }, numeric(1))
    data.frame(row.names = NULL, gene_id = names(out), fisher = out,
        sel = x$sel[seq_len(length(out))], das = x$das[seq_len(length(out))])
})

dflr <- do.call(rbind, dflr)
```

### miloDE
```{r miloDE}
.miloDE <- \(x){
    m <- assign_neighbourhoods(x, reducedDim_name = "PCA")
    res <- de_test_neighbourhoods(m, sample_id = "sample_id",
        design = ~ group_id, covariates = c("group_id"))
    res <- na.omit(res)
    if (!is.null(res)) {
        idx <- match(c("gene", "pval", "pval_corrected_across_genes"), names(res))
        names(res)[idx] <- c("gene_id", "p_val", "p_adj")
    }

    return(res)
}
#miloDE <- lapply(sces, .miloDE)
#saveRDS(miloDE, "../../data/Kang/miloDE.rds")
#milo <- readRDS("../../data/Kang/miloDE.rds")
dfml <- lapply(names(milo), \(x) {
  df <- milo[[x]]
  data.frame(df[c("gene_id", "p_val", "p_adj")],
    sel = x, das = "DS_miloDE")
})

dfml <- lapply(dfml, \(x) {
    out <- vapply(unique(x$gene_id), \(g) {
        p <- x[x$gene_id == g, "p_adj"]
        fisher(p)$statistic/attr(fisher(p)$statistic,"df")
        #-log(fisher(p)$p)
    }, numeric(1))
    data.frame(row.names = NULL, gene_id = names(out), fisher = out,
        sel = x$sel[seq_len(length(out))], das = x$das[seq_len(length(out))])
})

dfml <- do.call(rbind, dfml)
```

### Comparison between different DS methods
```{r ds, warning=FALSE}
ds <- rbind(dfer, dflr, dfml)
ndf <- dcast(data = ds,formula = ...~das,
    fun.aggregate = sum, 
    value.var = "fisher")

plt <- lapply(unique(ndf$sel), \(x) {
    df <- ndf[ndf$sel == x,]
    df[df == Inf] <- 1
    p <- ggpairs(df, columns = c("DS_lemur", "DS_edgeR", "DS_miloDE"),
        upper = list(continuous = wrap("cor", method = "pearson"))) +
        ggtitle(x) 
}) 
names(plt) <- unique(ndf$sel)
```


::: {.panel-tabset}

### FEAST
```{r feast, fig.height=7}
plt[["FEAST"]]
```

### Fstat
```{r fstat, fig.height=7}
plt[["Fstat"]]
```

### Fstat_edgeR
```{r fstat_edgeR, fig.height=7}
plt[["Fstat_edgeR"]]
```

### Fstat_sPVE
```{r fstat_sPVE, fig.height=7}
plt[["Fstat_sPVE"]]
```

### tPVE_sPVE
```{r tPVE_sPVE, fig.height=7}
plt[["PVE"]]
```

### random
```{r random, fig.height=7}
plt[["random"]]
```

### HVG
```{r hvg, fig.height=7}
plt[["hvg"]]
```

::: 





