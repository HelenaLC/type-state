---
title: "Case study on Kang18 scRNA-seq dataset - Feature Scoring"
format:
  html:
    toc: true
    code-fold: true
    code-tools: true
    toc_float: true
---
## Dependencies
```{r package, warning=FALSE, message=FALSE}
suppressPackageStartupMessages({
    source("../utils.R")
    library(edgeR)
    library(SingleCellExperiment)
    library(scater)
    #library(muscat)
    library(dplyr)
    library(FEAST)
    library(variancePartition)
    library(igraph)
    library(scran)
    library(bluster)
    library(MLVSBM)
    library(cluster)
    library(lisi)
    library(patchwork)
})
```

## Loading data
Load pre-clustered data with high and low resolution
```{r data}
#sce <- readRDS("../../data/Kang/cluster_sce.rds")
```

## Without Harmony integration

### Feature scoring
```{r feature scoring, message=FALSE, warning=FALSE}
# rowData(sce)$Fstat <- .Fstat(sce)
# rowData(sce)$edgeR <- .edgeR(sce)
# rowData(sce)$FEAST <- .FEAST(sce)
# rowData(sce)$sPVE <- .PVE_score(sce)$state
# rowData(sce)$tPVE <- .PVE_score(sce)$type
# rowData(sce)$Fstat_edgeR <- rank(rowData(sce)$Fstat) - rank(rowData(sce)$edgeR)
# rowData(sce)$Fstat_sPVE <- rank(rowData(sce)$Fstat) - rank(rowData(sce)$sPVE)
# rowData(sce)$PVE <- rank(rowData(sce)$tPVE) - rank(rowData(sce)$sPVE)
# 
# rowData(sce)$random <- runif(nrow(sce))
# saveRDS(sce, "../../data/Kang/scored_sce.rds")
sce <- readRDS("../../data/Kang/scored_sce.rds")
```



### Exploration of different scores

::: {.panel-tabset}

### Fstat vs edgeR
```{r fstat vs edgeR, fig.height=5, fig.width=7}
rd <- data.frame(rowData(sce))
ggplot(rd, 
    aes(x = Fstat, y = edgeR)) + 
    geom_point(alpha = 0.4) +
    scale_colour_gradient2() +
    ylab("state score: edgeR (Fisher)") +
    xlab("type score: Fstat") +
    scale_y_log10() +
    scale_x_log10() 
```

### FEAST vs edgeR
```{r feast vs edgeR}
ggplot(rd, 
    aes(x = FEAST, y = edgeR, col = rank(FEAST)-rank(edgeR))) + 
    geom_point(alpha = 0.4) +
    scale_colour_gradient2() +
    ylab("state score: edgeR (Fisher)") +
    xlab("type score: FEAST") +
    scale_y_log10() +
    scale_x_log10() 
```

### Fstat vs sPVE
```{r fstat vs pve}
ggplot(rd, 
    aes(x = log(Fstat), y = sPVE, col = rank(Fstat) - rank(PVE))) + 
    geom_point(alpha = 0.4) +
    scale_colour_gradient2() +
    ylab("state score: PVE") +
    xlab("type score: Fstat") 
```

### tPVE vs sPVE
```{r tPVE vs sPVE}
ggplot(rd, 
    aes(x = tPVE, y = sPVE, col = tPVE - sPVE)) + 
    geom_point(alpha = 0.4) +
    ylab("state score: sPVE") +
    xlab("type score: tPVE") +
    scale_colour_gradient2() 
```


### tPVE vs Fstat
```{r tPVE vs Fstat}
ggplot(rd, 
    aes(x = log(Fstat), y = tPVE)) + 
    geom_point(alpha = 0.4) +
    ylab("type score: tPVE") +
    xlab("type score: Fstat") 
```

:::

### Determine the optimal size of feature
To determine the optimal size of selected features, we tried different number of genes and evaluate its performance using ARI, mean silhouette score and neighbour purity between clusters. There are two dashed lines: the black dashed line indicates the evaluation value when no feature selection, i.e. using all features. 

```{r sta, warning=FALSE, results='hide'}
sel <- c("Fstat_edgeR", "random", "bio", "Fstat", "FEAST", "Fstat_sPVE", "PVE")
n <- seq(0.1,1,0.05)

params <- expand.grid(n = n, sel = sel)

# Loop over each row of params and compute performance
res <- lapply(seq_len(nrow(params)), \(i) {
    set.seed(2023)
    x <- params$n[i]
    s <- params$sel[i]
    idx <- order(rowData(sce)[, s],
      decreasing = TRUE)[seq_len(round(nrow(sce)*x))]
    sel_val <- rep(FALSE, nrow(sce))
    sel_val[idx] <- TRUE
    sce <- runPCA(sce, subset_row = sel_val)
    sce$cluster_re <- clusterCells(sce,
      use.dimred = "PCA",
      BLUSPARAM = NNGraphParam(cluster.fun = "louvain",
        cluster.args = list(resolution = 0.4)))
    nCluster <- length(unique(sce$cluster_re))
    ari <- ARI(sce$cluster_re, sce$cluster_id)
    pve_g <- .pve(sce, group = "g")
    pve_k <- .pve(sce, group = "k")
    tlisi <- .tLISI(sce, dr = "PCA")
    slisi <- .sLISI(sce, dr = "PCA")
    data.frame(ARI = ari,  sel = s,
      tlisi = tlisi, slisi = slisi,
      pve_k = pve_k, pve_g = pve_g,
      n = round(x*nrow(sce)), nCluster = nCluster)
})
sta <- data.frame(do.call(rbind, res))
saveRDS(sta, "../../data/Kang/sta.rds")
sta <- readRDS("../../data/Kang/sta.rds")
```

::: {.panel-tabset}

### ARI
```{r ari, fig.height=6, fig.width=10}
df <- sta
ggplot(df, aes(x = n, y = ARI, col = sel)) + 
    geom_line(stat = "identity") +
    geom_point(stat = "identity") +
    ggtitle("ARI vs. number of the selected features") +
    xlab("number of selected genes") + 
    scale_color_brewer(palette = "Set1")
```

### nClusters
```{r nClusters,  fig.height=6, fig.width=10}
ggplot(df, aes(x = n, y = nCluster, col = sel)) + 
    geom_line(stat = "identity") +
    geom_point(stat = "identity") +
    ggtitle("nClusters vs. number of the selected features") +
    xlab("number of selected genes") + 
    scale_color_brewer(palette = "Set1")
```


### Condition mixture
```{r tlisi, fig.height=6, fig.width=14}
ggplot(df, aes(x = n, y = slisi, col = sel)) + 
    geom_line(stat = "identity") +
    geom_point(stat = "identity") +
    ggtitle("sLISI vs. number of the selected features") +
    xlab("number of selected genes") + 
    scale_color_brewer(palette = "Set1")
```

### PVE_k
```{r pvek, fig.height=6, fig.width=14}
ggplot(df, aes(x = n, y = pve_k, col = sel)) + 
    geom_line(stat = "identity") +
    geom_point(stat = "identity") +
    ggtitle("PVE_k vs. number of the selected features") +
    xlab("number of selected genes") + 
    scale_color_brewer(palette = "Set1")
```

### PVE_g
```{r pveg, fig.height=6, fig.width=14}
ggplot(df, aes(x = n, y = pve_g, col = sel)) + 
    geom_line(stat = "identity") +
    geom_point(stat = "identity") +
    ggtitle("PVE_g vs. number of the selected features") +
    xlab("number of selected genes") + 
    scale_color_brewer(palette = "Set1")
```


:::

